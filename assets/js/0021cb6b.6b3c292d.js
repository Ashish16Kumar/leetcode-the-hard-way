"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[52165],{3905:function(t,n,e){e.d(n,{Zo:function(){return s},kt:function(){return d}});var r=e(67294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function l(t,n){if(null==t)return{};var e,r,a=function(t,n){if(null==t)return{};var e,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var u=r.createContext({}),p=function(t){var n=r.useContext(u),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},s=function(t){var n=p(t.components);return r.createElement(u.Provider,{value:n},t.children)},m={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(t,n){var e=t.components,a=t.mdxType,o=t.originalType,u=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),c=p(e),d=a,k=c["".concat(u,".").concat(d)]||c[d]||m[d]||o;return e?r.createElement(k,i(i({ref:n},s),{},{components:e})):r.createElement(k,i({ref:n},s))}));function d(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var o=e.length,i=new Array(o);i[0]=c;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var p=2;p<o;p++)i[p]=e[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}c.displayName="MDXCreateElement"},94865:function(t,n,e){e.r(n),e.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var r=e(87462),a=e(63366),o=(e(67294),e(3905)),i=["components"],l={description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/sort-an-array/",tags:["sorting"]},u="0912 - Sort an Array (Medium)",p={unversionedId:"0900-0999/sort-an-array-medium",id:"0900-0999/sort-an-array-medium",title:"0912 - Sort an Array (Medium)",description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/sort-an-array/",source:"@site/solutions/0900-0999/0912-sort-an-array-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/sort-an-array-medium",permalink:"/leetcode-the-hard-way/solutions/0900-0999/sort-an-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0912-sort-an-array-medium.md",tags:[{label:"sorting",permalink:"/leetcode-the-hard-way/solutions/tags/sorting"}],version:"current",sidebarPosition:912,frontMatter:{description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/sort-an-array/",tags:["sorting"]},sidebar:"tutorialSidebar",previous:{title:"0900 - 0999",permalink:"/leetcode-the-hard-way/solutions/category/0900---0999"},next:{title:"0936 - Stamping The Sequence (Hard)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/stamping-the-sequence-hard"}},s={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: STL",id:"approach-1-stl",level:2},{value:"Standard STL Sort",id:"standard-stl-sort",level:3},{value:"Stable STL Sort",id:"stable-stl-sort",level:3},{value:"Approach 2: Quick Sort",id:"approach-2-quick-sort",level:2},{value:"Quick Sort with Fixed Pivot (TLE)",id:"quick-sort-with-fixed-pivot-tle",level:3},{value:"Quick Sort with Randomised Pivot",id:"quick-sort-with-randomised-pivot",level:3}],c=function(t){return function(n){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)}},d=c("Tabs"),k=c("TabItem"),v=c("SolutionAuthor"),y={toc:m};function b(t){var n=t.components,e=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},y,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0912---sort-an-array-medium"},"0912 - Sort an Array (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-an-array/"},"https://leetcode.com/problems/sort-an-array/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an array of integers ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),", sort the array in ascending order."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 5 * 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-5 * 10^4 <= nums[i] <= 5 * 10^4"))),(0,o.kt)("h2",{id:"approach-1-stl"},"Approach 1: STL"),(0,o.kt)("h3",{id:"standard-stl-sort"},"Standard STL Sort"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(v,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void standardSTLSort(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n}\n"))),(0,o.kt)(k,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(v,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int[] sortArray(int[] nums) {\n        Arrays.sort(nums);\n        return nums;\n    }\n}\n")))),(0,o.kt)("h3",{id:"stable-stl-sort"},"Stable STL Sort"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(v,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void stableSTLSort(vector<int>& nums) {\n    stable_sort(nums.begin(), nums.end());\n}\n")))),(0,o.kt)("h2",{id:"approach-2-quick-sort"},"Approach 2: Quick Sort"),(0,o.kt)("h3",{id:"quick-sort-with-fixed-pivot-tle"},"Quick Sort with Fixed Pivot (TLE)"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(v,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int partition(vector<int>& nums, int l, int r) {\n    int pivot = nums[r];\n    int i = l - 1;\n    for (int j = l; j <= r - 1; j++) {\n        if (nums[j] < pivot) {\n            i++;\n            swap(nums[i], nums[j]);\n        }\n    }\n    swap(nums[i + 1], nums[r]);\n    return i + 1;\n}\n\nvoid quickSort(vector<int>& nums, int l, int r) {\n    if (l < r) {\n        int pivot = partition(nums, l, r);\n        quickSort(nums, l, pivot - 1);\n        quickSort(nums, pivot + 1, r);\n    }\n}\n"))),(0,o.kt)(k,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(v,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public static void quicksort(int l, int r) {\n        if (l < r) {\n            int mid = partition(l, r);\n            quicksort(l, mid - 1);\n            quicksort(mid + 1, r);\n        }\n    }\n\n    public static int partition(int l, int r) {\n        int pivot = ar[r];\n        int i = (l - 1);\n\n        for (int j = l; j <= r - 1; j++) {\n            if (ar[j] < pivot) {\n                i++;\n                int temp = ar[i];\n                ar[i] = ar[j];\n                ar[j] = temp;\n            }\n        }\n        int temp = ar[i + 1];\n        ar[i + 1] = ar[r];\n        ar[r] = temp;\n        return (i + 1);\n    }\n}\n")))),(0,o.kt)("h3",{id:"quick-sort-with-randomised-pivot"},"Quick Sort with Randomised Pivot"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(v,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int partition(vector<int>& nums, int l, int r) {\n    int pivot = nums[r];\n    int i = l - 1;\n    for (int j = l; j <= r - 1; j++) {\n        if (nums[j] < pivot) {\n            i++;\n            swap(nums[i], nums[j]);\n        }\n    }\n    swap(nums[i + 1], nums[r]);\n    return i + 1;\n}\n\nvoid quickSort(vector<int>& nums, int l, int r) {\n    if (l < r) {\n        swap(nums[l + rand() % (r - l)], nums[r]);\n        int pivot = partition(nums, l, r);\n        quickSort(nums, l, pivot - 1);\n        quickSort(nums, pivot + 1, r);\n    }\n}\n")))))}b.isMDXComponent=!0}}]);